import HTTPClient.Cookie
import HTTPClient.CookieModule
import HTTPClient.HTTPResponse
import HTTPClient.NVPair
import groovy.json.JsonSlurper
import net.grinder.plugin.http.HTTPPluginControl
import net.grinder.plugin.http.HTTPRequest
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import net.grinder.scriptengine.groovy.junit.annotation.Repeat
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

import static net.grinder.script.Grinder.grinder
import static org.hamcrest.Matchers.containsString
import static org.hamcrest.Matchers.is

// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3

import static org.junit.Assert.assertThat


/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */


@Repeat(1)
@RunWith(GrinderRunner)
class TestRunnerDemo1 {

    public static GTest test
    public static HTTPRequest request
    public static NVPair[] params = [
            new NVPair("name", "zhangsan")
    ]
    public static Cookie[] cookies = []

    public static NVPair[] headers = [
            new NVPair("Content-Type", "application/json")
    ]
    // 修改开头的成员变量

    private String jsonresult


    @BeforeProcess
    public static void beforeProcess() {
        HTTPPluginControl.getConnectionDefaults().timeout = 6000
        test = new GTest(1, "Test1")
        request = new HTTPRequest()
        grinder.logger.info("before process.");



    }


    @Test
    public void test_1(){
        HTTPResponse result = request.GET("http://192.168.1.232:8763/getcity", params)

        grinder.logger.info("############## 返回结果: " + result.getText()+ " ##############");
        grinder.logger.info("############## 返回状态码: " + result.getStatusCode()+ " ##############");

        // 解析JSON
        def jsonData = new JsonSlurper().parseText(result.text)
        grinder.logger.info("############## 返回结果: " + jsonData + " ##############");
        grinder.logger.info("############## 解析返回结果: " + jsonData.result + " ##############");

        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, is(200));
            assertThat(result.text, containsString("result"));
            jsonresult = jsonData.result
            this.test_2()

        }
    }



    public void test_2(){

        NVPair[] params = [
                new NVPair("name", jsonresult)
        ]
        HTTPResponse result = request.GET("http://192.168.1.232:8763/getcity", params)

        grinder.logger.info("############## 返回结果: " + result.getText()+ " ##############");
        grinder.logger.info("############## 返回状态码: " + result.getStatusCode()+ " ##############");

        // 解析JSON
        def jsonData = new JsonSlurper().parseText(result.text)
        grinder.logger.info("############## 返回结果: " + jsonData + " ##############");
        grinder.logger.info("############## 解析返回结果: " + jsonData.result + " ##############");

        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, is(200));
            assertThat(result.text, containsString("result"));
        }
    }







}
